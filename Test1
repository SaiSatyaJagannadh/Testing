#core.py
# Updated core.py with SSL handling fixes

import requests
import base64
import json
import urllib3
from urllib.parse import urlparse
from config import GITLAB_TOKEN, LLAMA_API_KEY

# Disable SSL warnings if we're going to disable verification
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class GitLabClient:
    def __init__(self, token, verify_ssl=True):
        self.token = token
        self.headers = {"PRIVATE-TOKEN": token}
        self.verify_ssl = verify_ssl
        
        # Configure session for better SSL handling
        self.session = requests.Session()
        self.session.headers.update(self.headers)
        self.session.verify = verify_ssl
        
        # Add timeout and retry logic
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[429, 500, 502, 503, 504],
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
        
    def get_project_info(self, repo_url):
        """Extract project info from GitLab URL"""
        try:
            parsed = urlparse(repo_url)
            gitlab_host = f"{parsed.scheme}://{parsed.netloc}"
            project_path = parsed.path.strip('/').replace('.git', '')
            
            # Get project ID - try different URL encoding approaches
            encoded_path = requests.utils.quote(project_path, safe='')
            api_url = f"{gitlab_host}/api/v4/projects/{encoded_path}"
            
            print(f"Connecting to: {api_url}")  # Debug info
            
            response = self.session.get(api_url, timeout=30)
            
            # If we get SSL error, try with SSL verification disabled
            if response.status_code == 0 or "SSL" in str(response.reason):
                print("SSL verification failed, retrying without SSL verification...")
                self.session.verify = False
                response = self.session.get(api_url, timeout=30)
            
            response.raise_for_status()
            return response.json(), gitlab_host
            
        except requests.exceptions.SSLError as e:
            print(f"SSL Error: {e}")
            print("Retrying with SSL verification disabled...")
            self.session.verify = False
            try:
                response = self.session.get(api_url, timeout=30)
                response.raise_for_status()
                return response.json(), gitlab_host
            except Exception as retry_e:
                raise Exception(f"Failed to fetch project info even without SSL verification: {str(retry_e)}")
        except requests.exceptions.ConnectionError as e:
            raise Exception(f"Connection error - check your network and GitLab URL: {str(e)}")
        except requests.exceptions.Timeout as e:
            raise Exception(f"Request timeout - GitLab server may be slow: {str(e)}")
        except requests.exceptions.HTTPError as e:
            if response.status_code == 401:
                raise Exception("Authentication failed - check your GitLab token")
            elif response.status_code == 404:
                raise Exception("Repository not found - check the URL and access permissions")
            else:
                raise Exception(f"HTTP {response.status_code}: {response.reason}")
        except Exception as e:
            raise Exception(f"Failed to fetch project info: {str(e)}")
    
    def get_repository_tree(self, gitlab_host, project_id):
        """Get repository file tree"""
        try:
            api_url = f"{gitlab_host}/api/v4/projects/{project_id}/repository/tree"
            params = {"recursive": True, "per_page": 100}
            
            all_files = []
            page = 1
            
            while True:
                params["page"] = page
                response = self.session.get(api_url, params=params, timeout=30)
                response.raise_for_status()
                
                files = response.json()
                if not files:
                    break
                    
                all_files.extend([f for f in files if f['type'] == 'blob'])
                page += 1
                
                if len(files) < 100:  # Last page
                    break
                    
                # Safety limit to prevent infinite loops
                if page > 50:
                    print("Warning: Stopped at page 50 to prevent excessive requests")
                    break
            
            return all_files
            
        except Exception as e:
            raise Exception(f"Failed to fetch repository tree: {str(e)}")
    
    def get_file_content(self, gitlab_host, project_id, file_path):
        """Get content of a specific file"""
        try:
            encoded_path = requests.utils.quote(file_path, safe='')
            api_url = f"{gitlab_host}/api/v4/projects/{project_id}/repository/files/{encoded_path}"
            
            # Try main branch first, then master
            for branch in ["main", "master", "develop"]:
                params = {"ref": branch}
                response = self.session.get(api_url, params=params, timeout=30)
                
                if response.status_code == 200:
                    file_data = response.json()
                    # Decode base64 content
                    try:
                        content = base64.b64decode(file_data['content']).decode('utf-8')
                        return content
                    except UnicodeDecodeError:
                        # Try with different encoding for binary files
                        try:
                            content = base64.b64decode(file_data['content']).decode('latin1')
                            return f"[Binary file content - {len(content)} bytes]"
                        except:
                            return f"[Unable to decode file content]"
                elif response.status_code != 404:
                    response.raise_for_status()
            
            return f"File not found in any branch: {file_path}"
            
        except Exception as e:
            return f"Error reading file {file_path}: {str(e)}"

# Rest of the classes remain the same...
class CodeProcessor:
    def __init__(self):
        self.supported_extensions = ['.py', '.js', '.java', '.cpp', '.c', '.h', '.md', '.txt', '.yml', '.yaml', '.json', '.xml', '.html', '.css', '.rb', '.go', '.rs', '.php', '.ts', '.jsx', '.tsx']
    
    def filter_files(self, files):
        """Filter files by supported extensions"""
        filtered = []
        for file_info in files:
            file_path = file_info['path']
            if any(file_path.endswith(ext) for ext in self.supported_extensions):
                if not self._should_skip_file(file_path):
                    filtered.append(file_info)
        return filtered
    
    def _should_skip_file(self, file_path):
        """Skip certain files/directories"""
        skip_patterns = [
            'node_modules/', '.git/', '__pycache__/', '.venv/', 'venv/',
            '.idea/', '.vscode/', 'dist/', 'build/', 'target/', 'vendor/',
            '.next/', '.nuxt/', 'coverage/', '.nyc_output/'
        ]
        return any(pattern in file_path for pattern in skip_patterns)
    
    def chunk_content(self, files_content, max_chunk_size=4000):
        """Split content into chunks for LLaMA processing"""
        chunks = []
        current_chunk = ""
        current_files = []
        
        for file_path, content in files_content.items():
            file_section = f"\n\n=== FILE: {file_path} ===\n{content}\n"
            
            if len(current_chunk + file_section) > max_chunk_size:
                if current_chunk:
                    chunks.append({
                        'content': current_chunk,
                        'files': current_files.copy()
                    })
                current_chunk = file_section
                current_files = [file_path]
            else:
                current_chunk += file_section
                current_files.append(file_path)
        
        if current_chunk:
            chunks.append({
                'content': current_chunk,
                'files': current_files
            })
        
        return chunks

class LlamaClient:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.groq.com/openai/v1/chat/completions"
    
    def generate_documentation(self, code_chunk, project_name=""):
        """Generate documentation for code chunk using LLaMA"""
        prompt = f"""You are an expert technical documentation generator. Analyze the provided code and generate comprehensive documentation.

Project: {project_name}
Files included: {', '.join(code_chunk['files'])}

Code Content:
{code_chunk['content']}

Generate detailed documentation that includes:
1. **Overview**: Brief description of what these files do
2. **Key Components**: Main classes, functions, and their purposes  
3. **Dependencies**: External libraries and frameworks used
4. **Code Structure**: How the code is organized
5. **Technical Details**: Important implementation details

Format the response in clear markdown with proper headers and code examples where relevant."""

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "llama3-8b-8192",
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 2000,
            "temperature": 0.3
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=payload, timeout=60)
            response.raise_for_status()
            
            result = response.json()
            return result["choices"][0]["message"]["content"]
        except Exception as e:
            return f"Error generating documentation: {str(e)}"
    
    def generate_project_overview(self, project_info, all_files):
        """Generate overall project documentation"""
        files_list = "\n".join([f"- {f}" for f in all_files[:20]])  # Limit to first 20 files
        if len(all_files) > 20:
            files_list += f"\n... and {len(all_files) - 20} more files"
        
        prompt = f"""Generate a comprehensive project README for this GitLab repository:

Project Name: {project_info.get('name', 'Unknown')}
Description: {project_info.get('description', 'No description provided')}
Default Branch: {project_info.get('default_branch', 'main')}

Files in repository:
{files_list}

Create a professional README that includes:
1. **Project Title and Description**
2. **Architecture Overview** 
3. **Technology Stack**
4. **Installation Instructions**
5. **Usage Guide**
6. **File Structure Explanation**
7. **Contributing Guidelines**

Make it comprehensive and suitable for both developers and stakeholders."""

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "llama3-8b-8192",
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 3000,
            "temperature": 0.2
        }
        
        try:
            response = requests.post(self.base_url, headers=headers, json=payload, timeout=60)
            response.raise_for_status()
            
            result = response.json()
            return result["choices"][0]["message"]["content"]
        except Exception as e:
            return f"Error generating project overview: {str(e)}"

class DocumentationGenerator:
    def __init__(self, verify_ssl=True):
        self.gitlab_client = GitLabClient(GITLAB_TOKEN, verify_ssl=verify_ssl)
        self.code_processor = CodeProcessor()
        self.llama_client = LlamaClient(LLAMA_API_KEY)
    
    def generate_documentation(self, repo_url, status_callback=None):
        """Main function to generate complete documentation"""
        try:
            # Step 1: Get project info
            if status_callback:
                status_callback("Connecting to GitLab...")
            project_info, gitlab_host = self.gitlab_client.get_project_info(repo_url)
            project_id = project_info['id']
            
            # Step 2: Get repository files
            if status_callback:
                status_callback("Fetching repository structure...")
            all_files = self.gitlab_client.get_repository_tree(gitlab_host, project_id)
            
            # Step 3: Filter and process files
            if status_callback:
                status_callback("Processing code files...")
            filtered_files = self.code_processor.filter_files(all_files)
            
            # Step 4: Get file contents
            if status_callback:
                status_callback("Reading file contents...")
            files_content = {}
            max_files = min(15, len(filtered_files))  # Limit to 15 files for demo
            
            for i, file_info in enumerate(filtered_files[:max_files]):
                if status_callback:
                    status_callback(f"Reading file {i+1}/{max_files}: {file_info['path']}")
                content = self.gitlab_client.get_file_content(gitlab_host, project_id, file_info['path'])
                if not content.startswith("Error reading") and not content.startswith("File not found"):
                    files_content[file_info['path']] = content
            
            if not files_content:
                raise Exception("No readable files found in the repository")
            
            # Step 5: Generate project overview
            if status_callback:
                status_callback("Generating project overview...")
            project_overview = self.llama_client.generate_project_overview(
                project_info, list(files_content.keys())
            )
            
            # Step 6: Process code chunks
            if status_callback:
                status_callback("Processing code for AI analysis...")
            chunks = self.code_processor.chunk_content(files_content)
            
            # Step 7: Generate documentation for each chunk
            documentation_parts = [project_overview]
            
            for i, chunk in enumerate(chunks):
                if status_callback:
                    status_callback(f"Generating documentation for chunk {i+1}/{len(chunks)}...")
                chunk_doc = self.llama_client.generate_documentation(chunk, project_info.get('name', ''))
                documentation_parts.append(f"\n\n## Code Analysis - Part {i+1}\n\n{chunk_doc}")
            
            # Step 8: Combine all documentation
            if status_callback:
                status_callback("Finalizing documentation...")
            
            final_documentation = "\n\n".join(documentation_parts)
            
            # Add metadata footer
            final_documentation += f"\n\n---\n*Documentation generated automatically from GitLab repository: {repo_url}*"
            final_documentation += f"\n*Files processed: {len(files_content)}*"
            final_documentation += f"\n*Generated on: {project_info.get('last_activity_at', 'Unknown')}*"
            
            return final_documentation
            
        except Exception as e:
            raise Exception(f"Documentation generation failed: {str(e)}")


#main.py

# Updated main.py with SSL configuration option

import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog, ttk
import threading
from core import DocumentationGenerator

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("GitLab AI Documentation Generator")
        self.geometry("950x750")
        self.resizable(True, True)
        
        self.doc_generator = None
        self.setup_ui()
        
    def setup_ui(self):
        # Main frame
        main_frame = tk.Frame(self, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(main_frame, text="GitLab AI Documentation Generator", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=(0, 20))
        
        # URL input section
        url_frame = tk.Frame(main_frame)
        url_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.url_label = tk.Label(url_frame, text="GitLab Repository URL:", font=("Arial", 10))
        self.url_label.pack(anchor=tk.W)
        
        self.url_entry = tk.Entry(url_frame, width=80, font=("Arial", 10))
        self.url_entry.pack(fill=tk.X, pady=(5, 0))
        
        # SSL Configuration section
        ssl_frame = tk.Frame(main_frame)
        ssl_frame.pack(fill=tk.X, pady=(5, 10))
        
        self.ssl_var = tk.BooleanVar(value=True)
        self.ssl_checkbox = tk.Checkbutton(ssl_frame, text="Verify SSL Certificates (uncheck if getting SSL errors)", 
                                         variable=self.ssl_var, font=("Arial", 9))
        self.ssl_checkbox.pack(anchor=tk.W)
        
        # Info label
        info_label = tk.Label(ssl_frame, text="Note: If you get SSL certificate errors, try unchecking the SSL verification option above.", 
                             font=("Arial", 8), fg="gray")
        info_label.pack(anchor=tk.W, pady=(2, 0))
        
        # Buttons frame
        button_frame = tk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        self.generate_button = tk.Button(button_frame, text="Generate Documentation", 
                                       command=self.start_generation, bg="#4CAF50", 
                                       fg="white", font=("Arial", 10, "bold"))
        self.generate_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.save_button = tk.Button(button_frame, text="Save Documentation", 
                                   command=self.save_documentation, state=tk.DISABLED,
                                   bg="#2196F3", fg="white", font=("Arial", 10))
        self.save_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.clear_button = tk.Button(button_frame, text="Clear Output", 
                                    command=self.clear_output, bg="#FF9800", 
                                    fg="white", font=("Arial", 10))
        self.clear_button.pack(side=tk.LEFT)
        
        # Status section
        status_frame = tk.Frame(main_frame)
        status_frame.pack(fill=tk.X, pady=(10, 5))
        
        self.status_label = tk.Label(status_frame, text="Status: Ready", 
                                   font=("Arial", 10), fg="green")
        self.status_label.pack(anchor=tk.W)
        
        # Progress bar
        self.progress_var = tk.StringVar()
        self.progress_label = tk.Label(status_frame, textvariable=self.progress_var, 
                                     font=("Arial", 9), fg="blue")
        self.progress_label.pack(anchor=tk.W)
        
        # Add progress bar widget
        self.progress_bar = ttk.Progressbar(status_frame, mode='indeterminate')
        self.progress_bar.pack(fill=tk.X, pady=(5, 0))
        
        # Documentation output
        output_label = tk.Label(main_frame, text="Generated Documentation:", 
                              font=("Arial", 10, "bold"))
        output_label.pack(anchor=tk.W, pady=(20, 5))
        
        self.text_area = scrolledtext.ScrolledText(main_frame, wrap=tk.WORD, 
                                                 font=("Consolas", 9), height=25)
        self.text_area.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
    def start_generation(self):
        repo_url = self.url_entry.get().strip()
        if not repo_url:
            messagebox.showerror("Error", "Please enter a GitLab repository URL.")
            return
        
        # Validate URL format
        if not (repo_url.startswith('http://') or repo_url.startswith('https://')):
            messagebox.showerror("Error", "Please enter a valid URL starting with http:// or https://")
            return
            
        self.generate_button.config(state=tk.DISABLED)
        self.save_button.config(state=tk.DISABLED)
        self.text_area.delete(1.0, tk.END)
        self.progress_bar.start()
        
        # Initialize doc generator with SSL setting
        verify_ssl = self.ssl_var.get()
        self.doc_generator = DocumentationGenerator(verify_ssl=verify_ssl)
        
        # Start generation in separate thread
        thread = threading.Thread(target=self.generate_docs, args=(repo_url,))
        thread.daemon = True
        thread.start()
        
    def generate_docs(self, repo_url):
        try:
            def update_status(message):
                self.after(0, lambda: self.status_label.config(text=f"Status: {message}"))
                self.after(0, lambda: self.progress_var.set(f"● {message}"))
            
            update_status("Starting documentation generation...")
            documentation = self.doc_generator.generate_documentation(repo_url, update_status)
            
            self.after(0, lambda: self.text_area.insert(tk.END, documentation))
            self.after(0, lambda: self.status_label.config(text="Status: Documentation generated successfully!", fg="green"))
            self.after(0, lambda: self.progress_var.set("✓ Complete"))
            self.after(0, lambda: self.save_button.config(state=tk.NORMAL))
            
        except Exception as e:
            error_msg = str(e)
            self.after(0, lambda: messagebox.showerror("Error", f"Failed to generate documentation:\n\n{error_msg}"))
            self.after(0, lambda: self.status_label.config(text="Status: Error occurred", fg="red"))
            self.after(0, lambda: self.progress_var.set("✗ Failed"))
            
            # Add helpful SSL error message
            if "SSL" in error_msg or "certificate" in error_msg.lower():
                self.after(0, lambda: messagebox.showinfo("SSL Help", 
                    "SSL certificate error detected!\n\n"
                    "Try the following:\n"
                    "1. Uncheck 'Verify SSL Certificates' option\n"
                    "2. Check if the GitLab URL is correct\n"
                    "3. Verify your network connection\n"
                    "4. Check if you need to be on VPN"))
        finally:
            self.after(0, lambda: self.generate_button.config(state=tk.NORMAL))
            self.after(0, lambda: self.progress_bar.stop())
    
    def save_documentation(self):
        content = self.text_area.get(1.0, tk.END)
        if not content.strip():
            messagebox.showwarning("Warning", "No documentation to save.")
            return
            
        file_path = filedialog.asksaveasfilename(
            defaultextension=".md",
            filetypes=[("Markdown files", "*.md"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("Success", f"Documentation saved to {file_path}")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to save file: {str(e)}")
    
    def clear_output(self):
        self.text_area.delete(1.0, tk.END)
        self.status_label.config(text="Status: Ready", fg="green")
        self.progress_var.set("")
        self.save_button.config(state=tk.DISABLED)

if __name__ == '__main__':
    app = App()
    app.mainloop()
